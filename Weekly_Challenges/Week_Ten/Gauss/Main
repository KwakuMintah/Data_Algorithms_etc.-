// Gauss.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include <vector>
using namespace std;

//double A[3][3] = { { 1,1,1 }, { 1,2,4 }, { 1,3,9 } };
double A[20][20] = {};
//double B[3] = {1, -1, 1};
double B[20] = { 1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,1,2,3 };
double x[3] = {};

//Do this with arrays too? Change BackSub to take arrays as an input.

void fillMat(int rows, int cols) {
    int i, j;
    double val;
    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            val = rand() % 10 + i;
            A[i][j] = val;
        }
    }
}

void printmat(int rows, int cols) {
    int i, j;
    cout << "\n" << "This is the Matrix:" << "\n";
    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            cout << "\n" << A[i][j];
        };
    };
};

void gaussian(int rows, int cols) {
    int h = 0, k = 0;
    int i, j, l, m;
    double pivot;
    while ((h <= rows) && (k <= cols)) {
        //Still trying to understand the line about i_max
        l = h + 1;
        m = k + 1;
        for (i = l; i < rows; i++) {
            pivot = A[i][k] / A[h][k];
            A[i][k] = 0.0;
            for (j = m; j < cols; j++) {
                A[i][j] = A[i][j] - (A[h][j] * pivot);
            };
        };
        h = h + 1;
        k = k + 1;
    };
}

void backSub(int rows) {
    int i, j;
    double fromA, fromB, useJ;
    for (i = rows - 1; i > -1; i--) {
        int j = i + 1;
        fromA = 1 / A[i][i];
        fromB = B[i];
        useJ = A[i][j] * x[j];
        x[i] = fromA * (fromB - useJ);
    }
}

void printSol(int rows) {
    int i;
    cout << "\n";
    if (rows <= 3) {
        cout << "\n" << "X = " << x[0];
        cout << "\n" << "Y = " << x[1];
        cout << "\n" << "Z = " << x[2];
    }
    else {
        for (i = 0; i < rows; i++) {
            cout << "\n" << "X" << i << " is: " << x[i];
        }
    }
    
}

void gaussianElim(int rows, int cols) {
    printmat(rows, cols);
    gaussian(rows, cols);
    backSub(rows);
    printmat(rows, cols);
    printSol(rows);
};

void funsies(int rows, int cols) {
    fillMat(rows, cols);
    printmat(rows, cols);
    gaussian(rows, cols);
    backSub(rows);
    printmat(rows, cols);
    printSol(rows);
}

int main()
{
    std::cout << "Hello World!\n";
    //The next step is to include pointers in order to make the code more generalised.
    //gaussianElim(3, 3);
    funsies(20, 20);
}
