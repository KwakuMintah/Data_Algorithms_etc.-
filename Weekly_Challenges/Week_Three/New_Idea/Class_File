#include <iostream>
using namespace std;
#ifndef ONEDMATHEADERDEF
#define ONEDMATHEADERDEF

class oneDMat {
public:
	int rows;
	int cols;
	int size;
	double* storage;
	oneDMat(int r, int c, double arr[]);
	//void conversion(double arr[], double mat[][]);
	void addMats(double matone[], double matTwo[], double matSum[]);
	void subMats(double matOne[], double matTwo[], double matSum[]);
	void multMats(double matOne[], double matTwo[], double matThree[]);
	void strassenMult(double matOne[], double matTwo[], double matSum[]);
	void searchMat(double mat[], int i_que, int j_que);
	void printMat(double mat[]);
};

oneDMat::oneDMat(int r, int c, double arr[]) {
	rows = r;
	cols = c;
	size = rows * cols;
	storage = arr;
}

void oneDMat::addMats(double matOne[], double matTwo[], double matSum[]) {
	int i;
	for (i = 0; i < size; i++) {
		matSum[i] = matOne[i] + matTwo[i];
	}
}

void oneDMat::subMats(double matOne[], double matTwo[], double matSum[]) {
	int i;
	for (i = 0; i < size; i++) {
		matSum[i] = matOne[i] - matTwo[i];
	}
}

//This multiplies using the naive approach.
void oneDMat::multMats(double matOne[], double matTwo[], double matSum[]) {
	int i, j, k;
	int rowMOne, rowMTwo, indOne, indTwo, indThree;
	for (i = 0; i < size; i++) {
		for (j = 0; j < size; j++) {
			for (k = 0; k < size; k++) {
				rowMOne = j * size;
				rowMTwo = k * size;
				indOne = i + rowMOne;
				indTwo = i + rowMTwo;
				indThree = k + rowMOne;
				matSum[indOne] += matOne[indTwo] * matTwo[indThree];
			}
		}
	}
}

//Runs but outputs the wrong values.
void oneDMat::strassenMult(double matOne[], double matTwo[], double matSum[]) {
	float mOne, mTwo, mThree, mFour, mFive, mSix, mSev;
	mOne = (matOne[0] + matOne[3]) * (matTwo[0] + matTwo[3]);
	mTwo = (matOne[1] + matOne[3]) * matTwo[0];
	mThree = (matTwo[2] - matTwo[3]) * matOne[0];
	mFour = (matTwo[2] - matTwo[0]) * matOne[3];
	mFive = (matOne[0] + matOne[2]) * matTwo[3];
	mSix = (matOne[1] - matOne[0]) * (matTwo[0] + matTwo[2]);
	mSev = (matOne[2] - matOne[3]) * (matTwo[1] + matTwo[3]);

	matSum[0] = mOne + mFour - mFive + mSev;
	matSum[1] = mThree + mFive;
	matSum[2] = mTwo + mFour;
	matSum[3] = mOne - mTwo + mThree + mSix;
}

//This seems to search but only find the first value.
void oneDMat::searchMat(double mat[], int i_que, int j_que) {
	int i_zer = i_que - 1;
	int j_zer = j_que - 1;
	int rowMaj = j_zer * size;
	int index = i_zer + rowMaj;
	int i;
	for (i = 0; i < size; i++) {
		if (index == i) {
			cout << "\n" << "This is the value at " << i_que << j_que << " : " << mat[i];
		}
	}
}

void oneDMat::printMat(double mat[]) {
	int i;
	for (i = 0; i < size; i++) {
		cout << "\n" << mat[i];
	}
}

/*
void oneDMat::conversion(double arr[], double mat[][]) {
	int i, j;
	int index, rowMaj;
	for (i = 0; i < size; i++) {
		for (j = 0; j < size; j++) {
			rowMaj = j * rows;
			index = i + rowMaj;
			arr[index] = mat[i][j];
		}
	}
}
*/

#endif
