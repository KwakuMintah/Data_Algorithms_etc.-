#include <iostream>
#include <fstream>
#include "Complex.hpp"
using namespace std;
#ifndef DISCRETEHEADERDEF
#define DISCRETEHEADERDEF

void discreteFourier(int size, double sample[], complexDouble fourier[]) {
    int i = 0, j = 0;
    for (i = 0; i < size; i++) {
        for (j = 0; j < size; j++) {
            double num = 2 * pi;
            double frac = num / size;
            double kn = i * j;
            double coef = -1 * frac * kn;
            double cosin = cos(coef);
            double sine = sin(coef);
            complexDouble theEx;
            theEx.real = cosin;
            theEx.imag = sine;
            fourier[i].real += sample[i] * theEx.real;
            fourier[i].imag += sample[i] * theEx.imag;
        }
    }
}

void fourierFunc(int size, double sample[], complexDouble output[]) {
    genFunc(size, sample, 1, 2, 3);
    discreteFourier(size, sample, output);
    printArray(size, sample, output);
}

void fourierEfoFunc(int size, double sample[], complexDouble output[]) {
    initArrayTwo(size, size, sample);
    discreteFourier(size, sample, output);
    printToFile(size, sample, output);
}

#endif
