#include <iostream>
#include "Complex.hpp"
using namespace std;
#ifndef DISCRETEHEADERDEF
#define DISCRETEHEADERDEF

double pi = 3.14159265359;



void genFunc(int size, double func[], double a, double b, double c) {
    int i;
    for (i = 0; i < size; i++) {
        func[i] = (a * i) + (b * i) + (c * i);
    }
}

void initArray(int size, double arr[]) {
    int i;
    double t;
    double interval;
    t = 0.1;
    for (i = 0; i < size; i++) {
        interval = i * t;
        arr[i] = interval;
    }
}

void initArrayTwo(int size, int N, double arr[]) {
    int i = 0;
    double t;

    for (i = 0; i < size; i++) {
        t = double(i);
        double coefOne = (N + 0.5) * t;
        double coefTwo = t * 0.5;
        double num = sin(coefOne);
        double den = sin(coefTwo);
        double frac = num / den;
        arr[i] = frac - 1.0;
    }
}

void printArray(int size, double sample[], complexDouble fourier[]) {
    int i;
    for (i = 0; i < size; i++) {
        cout << "\n" << i << "    " << sample[i] << "    " << fourier[i].real << "    " << fourier[i].imag;
    }
}

void discreteFourier(int size, double sample[], complexDouble fourier[]) {
    int i = 0, j = 0;
    for (i = 0; i < size; i++) {
        for (j = 0; j < size; j++) {
            double num = 2 * pi;
            double frac = num / size;
            double kn = i * j;
            double coef = -1 * frac * kn;
            double cosin = cos(coef);
            double sine = sin(coef);
            complexDouble theEx;
            theEx.real = cosin;
            theEx.imag = sine;
            fourier[i].real += sample[i] * theEx.real;
            fourier[i].imag += sample[i] * theEx.imag;
        }
    }
}

void fourierFunc(int size, double sample[], complexDouble output[]) {
    genFunc(size, sample, 1, 2, 3);
    discreteFourier(size, sample, output);
    printArray(size, sample, output);
}
#endif
