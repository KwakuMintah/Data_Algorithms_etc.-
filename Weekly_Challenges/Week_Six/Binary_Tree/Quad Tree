#include <iostream>
using namespace std;
#include "Node.hpp"
#ifndef QUADTREEHEADERDEF
#define QUADTREEHEADERDEF

class quadtree {
public:
	quadnode* root;
	quadnode* leaf;
	quadtree(quadnode* start);
	void grow(quadnode* branch, quadnode* n, quadnode* e, quadnode* s, quadnode* w);
	void printbysub(quadnode* node);
	void printval(quadnode* node);
};

quadtree::quadtree(quadnode* start) {
	quadnode* root = start;
	quadnode* leaf = NULL;
}

void quadtree::grow(quadnode* branch, quadnode* n, quadnode* e, quadnode* s, quadnode* w) {
	branch->north = n;
	branch->east = e;
	branch->south = s;
	branch->west = w;
};

void quadtree::printbysub(quadnode* node) {
	if (node == NULL) {
		return;
	};
	cout << "\n" << node->matData;
	printbysub(node->north);
	printbysub(node->east);
	printbysub(node->south);
	printbysub(node->west);
};

void quadtree::printval(quadnode* node) {
	if (node == NULL) {
		return;
	};
	
	printbysub(node->north);
	printbysub(node->east);
	printbysub(node->south);
	printbysub(node->west);
	cout << "\n" << node->matData;
	
};

/*
void quadtree::search(quadnode* root, int i, int j) {
	if ((root == NULL) || ((root->i == i) && (root->j == j))) {
		cout << "Found it: " << root->matData;
	}
	else if (root->index < index) {
		search(root->right, index);
	}
	else if (root->index > index) {
		search(root->left, index);
	}
	else {
		return;
	}
*/
#endif
