#include <iostream>
using namespace std;
#ifndef NODEHEADERDEF
#define NODEHEADERDEF

struct node {
    int index;
    double matData;
    struct node* left;
    struct node* right;
    node(int location, double val) {
        index = location;
        matData = val;
        left = NULL;
        right = NULL;
    };
};

//Potential Problem with this code. Only the root of the tree has an assigned name.
node* init(double arr[], int start, int end) {
    if (start > end) {
        return NULL;
    }
    int mid = (start + end) / 2;
    node* root = new node(mid, arr[mid]);
    root->left = init(arr, start, mid - 1);
    root->right = init(arr, mid + 1, end);
    return root;
};

node* addNodes(node* node_one, node* node_two) {
    int loc;
    double dat;
    if ((node_one == NULL) || (node_two == NULL)) {
        return NULL;
    }
    else if (node_one->matData == 0.0) {
        loc = node_two->index;
        dat = node_two->matData;
    }
    else if (node_two->matData == 0.0) {
        loc = node_one->index;
        dat = node_one->matData;
    }
    else {
        loc = node_one->index;
        dat = node_one->matData + node_two->matData;
    }
    node* node_sum = new node(loc, dat);
    node_sum->left = addNodes(node_one->left, node_two->left);
    node_sum->right = addNodes(node_one->right, node_two->right);
    return node_sum;
}

node* subNodes(node* node_one, node* node_two) {
    int loc;
    double dat;
    if ((node_one == NULL) || (node_two == NULL)) {
        return NULL;
    }
    else if (node_one->matData == 0.0) {
        loc = node_two->index;
        dat = node_two->matData;
    }
    else if (node_two->matData == 0.0) {
        loc = node_one->index;
        dat = node_one->matData;
    }
    else {
        loc = node_one->index;
        dat = node_one->matData - node_two->matData;
    }
    node* node_sum = new node(loc, dat);
    node_sum->left = addNodes(node_one->left, node_two->left);
    node_sum->right = addNodes(node_one->right, node_two->right);
    return node_sum;
}

struct quadnode {
    int i, j;
    double matData;
    struct quadnode* north;
    struct quadnode* south;
    struct quadnode* east;
    struct quadnode* west;
    quadnode(int row, int col, double num) {
        i = row;
        j = col;
        matData = num;
        north = NULL;
        south = NULL;
        east = NULL;
        west = NULL;
    };

    quadnode() = default;
};

quadnode* addQuad(quadnode* quad_one, quadnode* quad_two) {
    int loc_i, loc_j;
    double dat;
    if ((quad_one == NULL) || (quad_two == NULL)) {
        return NULL;
    }
    else if (quad_one->matData == 0.0) {
        loc_i = quad_two->i;
        loc_j = quad_two->j;
        dat = quad_two->matData;
    }
    else if (quad_two->matData == 0.0) {
        loc_i = quad_one->i;
        loc_j = quad_one->j;
        dat = quad_one->matData;
    }
    else {
        loc_i = quad_one->i;
        loc_j = quad_one->j;
        dat = quad_one->matData + quad_two->matData;
    }
    quadnode* quad_sum = new quadnode(loc_i, loc_j, dat);
    quad_sum->north = addQuad(quad_one->north, quad_two->north);
    quad_sum->east = addQuad(quad_one->east, quad_two->east);
    quad_sum->south = addQuad(quad_one->south, quad_two->south);
    quad_sum->west = addQuad(quad_one->west, quad_two->west);
    return quad_sum;
}

quadnode* subQuad(quadnode* quad_one, quadnode* quad_two) {
    int loc_i, loc_j;
    double dat;
    if ((quad_one == NULL) || (quad_two == NULL)) {
        return NULL;
    }
    else if (quad_one->matData == 0.0) {
        loc_i = quad_two->i;
        loc_j = quad_two->j;
        dat = quad_two->matData;
    }
    else if (quad_two->matData == 0.0) {
        loc_i = quad_one->i;
        loc_j = quad_one->j;
        dat = quad_one->matData;
    }
    else {
        loc_i = quad_one->i;
        loc_j = quad_one->j;
        dat = quad_one->matData - quad_two->matData;
    }
    quadnode* quad_sum = new quadnode(loc_i, loc_j, dat);
    quad_sum->north = addQuad(quad_one->north, quad_two->north);
    quad_sum->east = addQuad(quad_one->east, quad_two->east);
    quad_sum->south = addQuad(quad_one->south, quad_two->south);
    quad_sum->west = addQuad(quad_one->west, quad_two->west);
    return quad_sum;
}


#endif
