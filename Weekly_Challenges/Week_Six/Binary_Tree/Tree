#include <iostream>
using namespace std;
#include "Node.hpp"
#ifndef TREEHEADERDEF
#define TREEHEADERDEF

class tree {
public:
    node* root;
    node* leaf;
    int size;
    tree(node* start, int len);

    void grow(node* branch, node* twig_one, node* twig_two);
    void print(node* node);
    void printMat(node* node);
    void search(node* root, int index);
    void iterativeSearch(node* root, int index);
    void plus(node* node_one, node* node_two, node* root_sum);
    void minus(node* node_one, node* node_two, node* root_sum);
    void sum(int choice, node* root_one, node* root_two, tree new_tree);
};

tree::tree(node* start, int len) {
    node* root = start;
    node* leaf = NULL;
    int size = len;
};

void tree::grow(node* branch, node* twig_one, node* twig_two) {
    if ((branch->left != NULL) && (branch->right != NULL)) {
        if ((twig_one == NULL) && (twig_two != NULL)) {
            twig_two->right = branch->right;
            branch->right = twig_two;
        }
        else if ((twig_one != NULL) && (twig_two == NULL)) {
            twig_one->left = branch->left;
            branch->left = twig_one;
        }
        else if ((twig_one != NULL) && (twig_two != NULL)) {
            twig_one->left = branch->left;
            twig_two->right = branch->right;
            branch->left = twig_one;
            branch->right = twig_two;
        }
        else if ((twig_one == NULL) && (twig_two == NULL)) {
            return;
        }
    }
    else if ((branch->left != NULL) && (branch->right == NULL)) {
        if ((twig_one == NULL) && (twig_two != NULL)) {
            branch->right = twig_two;
        }
        else if ((twig_one != NULL) && (twig_two == NULL)) {
            twig_one->left = branch->left;
            branch->left = twig_one;
        }
        else if ((twig_one != NULL) && (twig_two != NULL)) {
            twig_one->left = branch->left;
            branch->left = twig_one;
            branch->right = twig_two;
        }
        else if ((twig_one == NULL) && (twig_two == NULL)) {
            return;
        }
    }
    else if ((branch->left == NULL) && (branch->right != NULL)) {
        if ((twig_one == NULL) && (twig_two != NULL)) {
            twig_two->right = branch->right;
            branch->right = twig_two;
        }
        else if ((twig_one != NULL) && (twig_two == NULL)) {
            branch->left = twig_one;
        }
        else if ((twig_one != NULL) && (twig_two != NULL)) {
            twig_two->right = branch->right;
            branch->right = twig_two;
            branch->left = twig_one;
        }
        else if ((twig_one == NULL) && (twig_two == NULL)) {
            return;
        }
    }
    else if ((branch->left == NULL) && (branch->right == NULL)) {
        branch->left = twig_one;
        branch->right = twig_two;
    }
}

void tree::print(node* node) {
    if (node == NULL) {
        return;
    };
    
    
    print(node->left);
    print(node->right);
    cout << "\n" << node->matData;
}

void tree::printMat(node* node) {
    if (node == NULL) {
        return;
    };

    
    printMat(node->left);
    cout << "\n" << node->matData;
    printMat(node->right); 
}

void tree::search(node* root, int index) {
    if (root->index == index) {
        cout << "\n" << "Found it: " << root->matData;
    }
    else if (root->index < index) {
        search(root->right, index);
    }
    else if (root->index > index) {
        search(root->left, index);
    }
    else if (root == NULL) {
        cout << "Empty Tree.";
    }
    else {
        return;
    }
}

void tree::iterativeSearch(node* root, int index) {
    while ((root != NULL) && (index != root->index)) {
        if (index < root->index) {
            iterativeSearch(root->left, index);
        }
        else if (index > root->index) {
            iterativeSearch(root->right, index);
        }
        return;
    }
    cout << "\n" << "This is the value: " << root->matData;
}

#endif
