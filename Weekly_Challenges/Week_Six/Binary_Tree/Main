// Binary_Tree.cpp : This file contains the 'main' function. Program execution begins and ends there.
//Time measuring func from Geek for Geeks.

#include <iostream>
#include <chrono>
#include "Tree.hpp"
#include "QuadTree.hpp"
#include "Node.hpp"
using namespace std;
using namespace std::chrono;



void testTree() {
    node nodeRoot(0, 0.0);
    node* seed = &nodeRoot;

    node nodeOne(1, 1.0);
    node nodeTwo(2, 2.0);
    node nodeThree(3, 3.0);
    node nodeFour(4, 4.0);
    node nodeFive(5, 5.0);

    node* one = &nodeOne;
    node* two = &nodeTwo;
    node* three = &nodeThree;
    node* four = &nodeFour;
    node* five = &nodeFive;

    tree treeOne(two, 4);

    treeOne.grow(two, one, three);
    treeOne.grow(one, seed, NULL);
    treeOne.printMat(two);
    treeOne.grow(one, five, NULL);
    treeOne.printMat(two);
    treeOne.search(two, 3);
    treeOne.iterativeSearch(two, 3);
}

void testTreeTwo() {
    double matOne[4] = { 1, 2, 3, 4 };
    double matTwo[4] = { 5, 6, 7, 8 };
    double matSparse[4] = { 3, 4, 0, 0 };

    node* treeOne = init(matOne, 0, 3);
    node* treeTwo = init(matTwo, 0, 3);
    node* sparseTree = init(matSparse, 0, 3);

    tree testOne(treeOne, 4);
    tree testTwo(treeTwo, 4);


    node* treeThree = addNodes(treeOne, sparseTree);
    tree testThree(treeThree, 4);

    testOne.printMat(treeOne);
    testTwo.printMat(treeTwo);
    testThree.printMat(treeThree);
}


void testQuad() {
    //Currently working on a more efficient way to do this.
    quadnode nodeRoot(0, 0, NULL);
    quadnode* seed = &nodeRoot;

    quadnode subMatOne(0, 0, NULL);
    quadnode subMatTwo(0, 0, NULL);
    quadnode subMatThree(0, 0, NULL);
    quadnode subMatFour(0, 0, NULL);

    quadnode nodeOne(1, 1, 1.0);
    quadnode nodeTwo(1, 2, 2.0);
    quadnode nodeThree(1, 3, 3.0);
    quadnode nodeFour(1, 4, 4.0);
    quadnode nodeFive(2, 1, 5.0);
    quadnode nodeSix(2, 2, 6.0);
    quadnode nodeSeven(2, 3, 7.0);
    quadnode nodeEight(2, 4, 8.0);
    quadnode nodeNine(3, 1, 9.0);
    quadnode nodeTen(3, 2, 10.0);
    quadnode nodeEleven(3, 3, 11.0);
    quadnode nodeTwelve(3, 4, 12.0);
    quadnode nodeThirteen(4, 1, 13.0);
    quadnode nodeFourteen(4, 2, 14.0);
    quadnode nodeFifteen(4, 3, 15.0);
    quadnode nodeSixteen(4, 4, 16.0);

    quadnode quadRoot(0, 0, NULL);
    quadnode* quadseed = &quadRoot;

    quadnode quadMatOne(0, 0, NULL);
    quadnode quadMatTwo(0, 0, NULL);
    quadnode quadMatThree(0, 0, NULL);
    quadnode quadMatFour(0, 0, NULL);

    quadnode quadOne(1, 1, 1.0);
    quadnode quadTwo(1, 2, 2.0);
    quadnode quadThree(1, 3, 3.0);
    quadnode quadFour(1, 4, 4.0);
    quadnode quadFive(2, 1, 5.0);
    quadnode quadSix(2, 2, 6.0);
    quadnode quadSeven(2, 3, 7.0);
    quadnode quadEight(2, 4, 8.0);
    quadnode quadNine(3, 1, 9.0);
    quadnode quadTen(3, 2, 10.0);
    quadnode quadEleven(3, 3, 11.0);
    quadnode quadTwelve(3, 4, 12.0);
    quadnode quadThirteen(4, 1, 13.0);
    quadnode quadFourteen(4, 2, 14.0);
    quadnode quadFifteen(4, 3, 15.0);
    quadnode quadSixteen(4, 4, 16.0);

    quadnode* nw = &subMatOne;
    quadnode* ne = &subMatTwo;
    quadnode* sw = &subMatThree;
    quadnode* se = &subMatFour;

    quadnode* qnw = &quadMatOne;
    quadnode* qne = &quadMatTwo;
    quadnode* qsw = &quadMatThree;
    quadnode* qse = &quadMatFour;

    quadnode* one = &nodeOne;
    quadnode* two = &nodeTwo;
    quadnode* three = &nodeThree;
    quadnode* four = &nodeFour;
    quadnode* five = &nodeFive;
    quadnode* six = &nodeSix;
    quadnode* seven = &nodeSeven;
    quadnode* eight = &nodeEight;
    quadnode* nine = &nodeNine;
    quadnode* ten = &nodeTen;
    quadnode* eleven = &nodeEleven;
    quadnode* twelve = &nodeTwelve;
    quadnode* thirteen = &nodeThirteen;
    quadnode* fourteen = &nodeFourteen;
    quadnode* fifteen = &nodeFifteen;
    quadnode* sixteen = &nodeSixteen;

    quadnode* qone = &quadOne;
    quadnode* qtwo = &quadTwo;
    quadnode* qthree = &quadThree;
    quadnode* qfour = &quadFour;
    quadnode* qfive = &quadFive;
    quadnode* qsix = &quadSix;
    quadnode* qseven = &quadSeven;
    quadnode* qeight = &quadEight;
    quadnode* qnine = &quadNine;
    quadnode* qten = &quadTen;
    quadnode* qeleven = &quadEleven;
    quadnode* qtwelve = &quadTwelve;
    quadnode* qthirteen = &quadThirteen;
    quadnode* qfourteen = &quadFourteen;
    quadnode* qfifteen = &quadFifteen;
    quadnode* qsixteen = &quadSixteen;

    quadtree treeOne(seed);
    quadtree treeTwo(quadseed);
    

    treeOne.grow(seed, nw, ne, sw, se);
    treeOne.grow(nw, one, two, five, six);
    treeOne.grow(ne, three, four, seven, eight);
    treeOne.grow(sw, nine, ten, thirteen, fourteen);
    treeOne.grow(se, eleven, twelve, fifteen, sixteen);

    treeOne.grow(quadseed, qnw, qne, qsw, qse);
    treeOne.grow(qnw, qone, qtwo, qfive, qsix);
    treeOne.grow(qne, qthree, qfour, qseven, qeight);
    treeOne.grow(qsw, qnine, qten, qthirteen, qfourteen);
    treeOne.grow(qse, qeleven, qtwelve, qfifteen, qsixteen);

    cout << "\n" << "Mat One: " << "\n";
    treeOne.printval(seed);
    cout << "\n" << "Mat Two: " << "\n";
    treeTwo.diagonal(quadseed);
    treeTwo.printval(quadseed);
    cout << "\n" << "Add them together: " << "\n";
    quadnode* newTree = addQuad(seed, quadseed);
    quadtree treeThree(newTree);
    treeThree.printval(newTree);
};

int main() {
    std::cout << "Hello World!\n";
    auto startTree = high_resolution_clock::now();

    //testTree();
    //This measures the Wall Time of the function.
    //auto stopTree = high_resolution_clock::now();
    //auto durationTree = duration_cast<microseconds>(stopTree - startTree);

    //cout << "\n" << "QuadTree" << "\n";

    //cout << "\n" << "This took " << durationTree.count()  << " ms.";

    testQuad();
}
