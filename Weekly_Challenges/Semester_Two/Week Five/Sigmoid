clear all;
load("mnist.mat");

%Taken from Week One
XTestReshape = reshape(XTest,28,28,10000);
XTestReshapeForDiv = reshape(XTestReshape, [], 10000);
XTestTrans = transpose(XTestReshapeForDiv);
YTestTrans = transpose(YTest);
%Assuming W to be the coefficients from Ax = B
WTest = mrdivide(XTestReshapeForDiv,YTestTrans);

WTestSize = size(WTest);
WTestLength = WTestSize(1);
randval = randi(WTestLength);

%Testing what happens if w_0 is a random element
w = WTest(randval,1);
%w_0 has a value of zero so has little to no effect on the rest
WTestTrans = transpose(WTest);
%Now we take X to be A, z to be B, W to be x, and w is a weight
z = (WTestTrans * XTestReshapeForDiv) + w;
YTestHat = sigfunc(z);
YTestHatTrans = transpose(YTestHat);
wRidge = ridge(YTest,YTestHatTrans,5);
%wLasso = lasso(YTestHat,YTest);
lossfunc = crossentropy(YTest,YTestHat);

XSize = size(XTestReshapeForDiv);
XLen = XSize(2);

dW = deltaW(XLen,XTestReshapeForDiv,YTestHat,YTest);
db = deltaB(XLen,YTestHat,YTest);

optim = optimize(WTest,w,XTestReshapeForDiv,YTest,50,0.8);
YTestPrediction = predict(XLen,YTestHat);

TestAccuracy = 100 - mean(abs(YTestPrediction-YTest)*100);

%These are steps one and two
function sigmoid = sigfunc(z)
    den = 1 - exp(-z);
    %Made this mldivide so it could work
    sigmoid = mldivide(1,den);
    %Wondered what change elementwise would make
    %sigmoid = 1 ./ den;
end

function CELoss = crossentropy(Y,YHat)
    bracOne = 1 - Y;
    bracTwo = 1 - YHat;
    logOne = Y * log(YHat);
    logTwo = bracOne * log(bracTwo);
    CELoss = -(logOne + logTwo);
end

function dW = deltaW(m,X,YHat,Y)
    prob = YHat - Y;
    probTrans = transpose(prob);
    den = m * (X * probTrans);
    dW = mldivide(1,den);
    %dW = 1 ./ den;
end

function dB = deltaB(m,YHat,Y)
    den = m * sum(YHat - Y);
    dB = mldivide(1,den);
    %dB = 1 ./ den;
end

function optim = optimize(W,w,X,Y,iter,lr)
    WTrans = transpose(W);
    mn = size(X);
    m = mn(2);
    costs = {};
    for i = iter
        z = (WTrans * X) + w;
        YHat = sigfunc(z);
        lossfunc = crossentropy(Y,YHat);
        cost = squeeze(lossfunc);
        dW = deltaW(m,X,YHat,Y);
        dB = deltaB(m,YHat,Y);

        W = W - (lr * dW);
        w = w - (lr * dB);
        if rem(100,i) == 0 
            costs = [costs;cost];
        end
    end
    optim = costs;
end

function prediction = predict(m,A)
    prediction = zeros(1,m);
    ASize = size(A);
    ALen = ASize(2);
    for i = ALen
        if A(:,i) > 0.5
            prediction(:,i) = 1;
        elseif A(:,1) <= 0.5
            prediction(:,i) = 0;
        end
    end
end

