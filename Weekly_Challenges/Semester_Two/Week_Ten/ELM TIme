clear all;
size = 600;

%Creating x and Sinc
xTrans = linspace(-pi,pi,size);
x = transpose(xTrans);
y = (sin(pi .* x))/pi .* x;

%Splitting the sets
ind = randperm(600);
xTrain = x(ind(1:500),:);
xTest = x(ind(501:end),:);
yTrain = (sin(pi .* xTrain))/pi .* xTrain;
yTest = (sin(pi .* xTest))/pi .* xTest;

%Network Time
inputSize = 1;
output_size = 1;

hiddenSize = 600;
hiddenSizeTrain = int32((hiddenSize/600)*500);
hiddenSizeTest = int32((hiddenSize/600)*100);

wTrainIn = rand(inputSize,hiddenSizeTrain);
bTrain = rand(hiddenSizeTrain);

gTrain = dot(xTrain,wTrainIn) + bTrain;
hTrain = max(gTrain,[],1);
wTrainOut = dot(pinv(hTrain),yTrain);

%Now the test
wTestIn = rand(inputSize,hiddenSizeTest);
bTest = rand(hiddenSizeTest);

gTest = dot(xTest,wTestIn) + bTest;
hTest = max(gTest,[],1);
wTestOut = dot(pinv(hTest),yTest);
predictionTest = dot(hTest,wTestIn);

check = model(predictionTest,yTest);

%In the tutorial he says he improved it by adding more hidden nodes but
%that makes it all fall apart :(

function accuracy = model(prediction,real)
    correct = 0;
    [~, max_indP] = max(prediction);
    argmaxP = prediction(max_indP);
    [~, max_indR] = max(real);
    argmaxR = real(max_indR);
    dim = size(argmaxR);
    count = dim(1,1);
    for i = count
        if argmaxP(i) == argmaxR(i)
            correct = correct + 1;
        else
            correct = correct + 0;
        end
    end
    accuracy = correct / count;
end






