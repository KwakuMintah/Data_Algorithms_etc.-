#include <iostream>
#include "Node.hpp"
using namespace std;
#ifndef LISTHEADERDEF
#define LISTHEADERDEF

class list {
public:
    node* head;
    int length;

    void push(double matData);
    void after(node* prev_node, double matData);
    void before(node* next_node, double matData);
    void end(node** head_ref, double matData);
    void deletion(node** head_ref, node* del);
    void deleteNode(node** head_ref, int n);
    void printlist(node* head);
};

void list::push(double matData) {
    cout << "Push";
    node* newnode = new node(matData);
    newnode->next = head;
    head = newnode;
};

void list::after(node* prev_node, double matData) {
    cout << "Inserting node...";

    if (prev_node == NULL) {
        cout << "Error: No previous node.";
    };

    node* new_node = new node(matData);

    new_node->matData = matData;
    new_node->next = prev_node->next;
    prev_node->next = new_node;
    new_node->prev = prev_node;

    if (new_node->next != NULL) {
        new_node->next->prev = new_node;
    };
};

void list::before(node* next_node, double matData) {
    node** head_ref{};

    cout << "Inserting node...";

    if (next_node == NULL) {
        cout << "Error: No following node.";
    };

    node* new_node = new node(matData);

    new_node->matData = matData;
    new_node->prev = next_node->prev;
    next_node->prev = new_node;
    new_node->next = next_node;


    if (new_node->prev != NULL) {
        new_node->prev->next = new_node;
    }
    else {
        (*head_ref) = new_node;
    };
}

void list::end(node** head_ref, double matData) {
    cout << "Appending node...";

    node* new_node = new node(matData);

    node* last = *head_ref;

    new_node->matData = matData;
    new_node->next = NULL;

    if (*head_ref == NULL) {
        new_node->prev = NULL;
        *head_ref = new_node;
    };

    while (last->next != NULL) {
        last = last->next;
        last->next = new_node;
        new_node->prev = last;
    };


};

void list::deletion(node** head_ref, node* del) {
    cout << "Deleting node...";

    if (*head_ref == NULL || del == NULL) {
        return;
    };

    if (*head_ref == del) {
        *head_ref = del->next;
    };

    if (del->next != NULL) {
        del->next->prev = del->prev;
    };

    if (del->prev != NULL) {
        del->prev->next = del->next;
    };

    free(del);
};

void list::deleteNode(node** head_ref, int n) {
    int i;

    cout << "Finding node...";

    if (*head_ref == NULL || n <= 0) {
        return;
    };

    class node* current = *head_ref;

    for (int i = 1; current != NULL && i < n; i++) {
        current = current->next;
    };

    if (current == NULL) {
        return;
    };

    deletion(head_ref, current);
};

void list::printlist(node* head)
{
    while (head != NULL) {
        cout << "\n" << head->matData << " ";
        head = head->next;
    }
}

#endif
