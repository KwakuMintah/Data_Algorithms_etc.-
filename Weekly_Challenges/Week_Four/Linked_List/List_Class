#include <iostream>
#include "Node.hpp"
using namespace std;
#ifndef LISTHEADERDEF
#define LISTHEADERDEF

class list {
public:
    node* head;
    node* sorted;
    node* next;
    node* prev;
    int length;
    list(int size); 

    void push(node* new_node, double matData);
    void sort(node* head_ref);
    void insert(node* new_node);
    void count(node* head, double search);
    void measure(node* head);
    void after(node* prev_node, double matData);
    
    void replaceTail(node* head, double matData);
    void before(node* next_node, double matData);
    void end(node* head, double matData);
    
    void deletion(node* head, node* del);
    void deleteNode(node* head, int n);
    //Can't seem to delete the whole list because free doesn't seem to work.
    void deleteList(node** head);

    void print(node* head);
};

list::list(int size) {
    length = size;
    head = NULL;
    sorted = NULL;
    next = NULL;
    prev = NULL;
};

void list::push(node* new_node, double matData) {
    cout << "\n" << "Pushing...";
    if (new_node == NULL) {
        node* new_node = new node(matData);
        new_node->next = head;
        head = new_node;
    }
    else if (matData == NULL) {
        new_node->next = head;
        head = new_node;
    };
};

void list::sort(node* head) {
    cout << "\n" << "Sorting...";
    sorted = NULL;
    node* current = head;
    while (current != NULL) {
        node* next = current->next;
        insert(current);
        current = next;
    };
    head = sorted;
};

void list::insert(node* new_node) {
    if (sorted == NULL || sorted->matData >= new_node->matData) {
        new_node->next = sorted;
        sorted = new_node;
    }
    else {
        node* current = sorted;
        while (current->next != NULL && current->next->matData < new_node->matData) {
            current = current->next;
        }
        new_node->next = current->next;
        current->next = new_node;
    };
};

void list::count(node* head, double search) {
    cout << "\n" << "Counting..." << "\n";
    node* current = head;
    int count = 0;
    while (current != NULL) {
        if (current->matData == search) {
            count++;
        };
        current = current->next;
    };
    cout << count << " counts of " << search;
}

void list::measure(node* head) {
    cout << "\n" << "Measuring..." << "\n";
    int count = 0;
    int gap;
    node* current = head;
    while (current != NULL) {
        count++;
        current = current->next;
    };
    if (count > length) {
        gap = count - length;
        if (gap != 1) {
            cout << "This Linked List is too big. Remove " << gap << " nodes." << "\n";
        }
        else {
            cout << "This Linked List is too big. Remove " << gap << " node." << "\n";
        };
        return;
    }
    else if (count < length) {
        gap = length - count;
        cout << "There's space for " << gap << " more." << "\n";
        cout << count << " nodes.";
    }
    else {
        cout << count << " nodes.";
    };
    
}

void list::after(node* prev_node, double matData) {
    cout << "\n" << "Inserting node..." << "\n";

    if (prev_node == NULL) {
        cout << "Error: No previous node.";
        return;
    };

    node* new_node = new node(matData);

    new_node->matData = matData;
    new_node->next = prev_node->next;
    prev_node->next = new_node;
    new_node->prev = prev_node;

    if (new_node->next != NULL) {
        new_node->next->prev = new_node;
    };
}

void list::before(node* next_node, double matData) {
    node* head;

    cout << "\n" << "Inserting node..." << "\n";

    if (next_node == NULL) {
        cout << "Error: No following node.";
        return;
    };

    node* new_node = new node(matData);

    new_node->matData = matData;
    new_node->prev = next_node->prev;
    next_node->prev = new_node;
    new_node->next = next_node;
    
    
    if (new_node->prev != NULL) {
        new_node->prev->next = new_node;
    }
    else {
        head = new_node;
    };

}

void list::replaceTail(node* head, double matData) {
    cout << "\n" << "Replacing the Tail Node..." << "\n";

    node* new_node = new node(matData);
    node* tail = head;

    new_node->matData = matData;
    new_node->next = NULL;

    if (head == NULL) {
        new_node->prev = NULL;
        head = new_node;
    }
    else if (tail->next != NULL) {
        tail = tail->next;
        tail->next = new_node;
        new_node->prev = tail;
    };
};

void list::end(node* head, double matData) {
    cout << "\n" << "Appending node..." << "\n";

    node* new_node = new node(matData);
    

    new_node->matData = matData;
    new_node->next = NULL;

    if (head == NULL) {
        new_node->prev = NULL;
        head = new_node;
    }
    else {
        node* tail = head;
        while (tail->next != NULL) {
            tail = tail->next;
        };
        tail->next = new_node;
        new_node->prev = tail;
    };
};

void list::deletion(node* head, node* del) {
    cout << "\n" << "Deleting node...";

    if (head == NULL || del == NULL) {
        return;
    };

    if (head == del) {
        head = del->next;
    };

    if (del->next != NULL) {
        del->next->prev = del->prev;
    };

    if (del->prev != NULL) {
        del->prev->next = del->next;
    };

    //free(del);
};

void list::deleteNode(node* head, int n) {
    int i;

    cout << "\n" << "Finding node..." << "\n";

    if (head == NULL || n <= 0) {
        return;
    };

    class node* current = head;

    for (int i = 1; current != NULL && i < n; i++) {
        current = current->next;
    };

    if (current == NULL) {
        return;
    };

    deletion(head, current);
};
void list::deleteList(node** head) {
    cout << "\n" << "Deleting list...";
    node* current = *head;
    node* next = NULL;

    while (current != NULL) {
        next = current->next;
        free(current);
        current = next;
    };

    *head = NULL;
}

void list::print(node* head) {
    if (head == NULL) {
        cout << "Linked List is Empty.";
        return;
    }
    else {
        while (head != NULL) {
            cout << "\n" << head->matData << " ";
            head = head->next;
        }
    };
    
}

#endif
